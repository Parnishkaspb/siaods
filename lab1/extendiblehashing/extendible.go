package extendiblehashing

import (
	"fmt"
	"hash/fnv"
)

type keyValue struct {
	key   string
	value any
}

// Bucket - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ
type Bucket struct {
	table   []keyValue
	ld      int
	maxSize int
}

// ExtendibleHash - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä—è–µ–º–æ–≥–æ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è.
type ExtendibleHash struct {
	directories []*Bucket
	gd          int
}

// hashKey - –ø–µ—Ä–≤–∏—á–Ω–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
func hashKey(key string) int {
	h := fnv.New32a()
	h.Write([]byte(key))
	return int(h.Sum32())
}

// secondHash - –≤—Ç–æ—Ä–∏—á–Ω–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ (–ù–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è XOR)
func secondHash(key string) int {
	h := fnv.New32a()
	h.Write([]byte("salt-" + key)) // –î–æ–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
	return int(h.Sum32())
}

// finalHash - –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–≤–∞ —Ö–µ—à–∞ —á–µ—Ä–µ–∑ XOR
func finalHash(key string) int {
	return hashKey(key) ^ secondHash(key)
}

// NewExtendibleHash —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—É.
func NewExtendibleHash(initialGD int, maxSize int) *ExtendibleHash {
	size := 1 << initialGD // 2^GD –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
	directories := make([]*Bucket, size)

	for i := range directories {
		directories[i] = &Bucket{
			table:   make([]keyValue, 0, maxSize), // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—É—Å—Ç–æ–π
			ld:      initialGD,
			maxSize: maxSize,
		}
	}

	return &ExtendibleHash{
		directories: directories,
		gd:          initialGD,
	}
}

// InsertKey –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–ª—é—á –≤ —Ç–∞–±–ª–∏—Ü—É.
func (eh *ExtendibleHash) InsertKey(key string, value any) error {
	h := finalHash(key)
	index := h & ((1 << eh.gd) - 1)
	bucket := eh.directories[index]

	// –ï—Å–ª–∏ –∫–ª—é—á —É–∂–µ –µ—Å—Ç—å ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º
	for i, kv := range bucket.table {
		if kv.key == key {
			bucket.table[i].value = value
			return nil
		}
	}

	// –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ—Å—Ç–æ ‚Äî –≤—Å—Ç–∞–≤–ª—è–µ–º
	if len(bucket.table) < bucket.maxSize {
		bucket.table = append(bucket.table, keyValue{key, value})
		return nil
	}

	// –ë–∞–∫–µ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω -> split
	eh.splitBucket(index)

	// üîπ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å, –Ω–æ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Å—Ç–æ
	newIndex := h & ((1 << eh.gd) - 1)
	newBucket := eh.directories[newIndex]

	if len(newBucket.table) < newBucket.maxSize {
		newBucket.table = append(newBucket.table, keyValue{key, value})
		return nil
	}

	for i := 0; i < len(eh.directories); i++ {
		if len(eh.directories[i].table) < eh.directories[i].maxSize {
			eh.directories[i].table = append(eh.directories[i].table, keyValue{key, value})
			return nil
		}
	}

	return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å –∫–ª—é—á %s –ø–æ—Å–ª–µ —Ä–∞–∑–±–∏–µ–Ω–∏—è", key)
}

func (eh *ExtendibleHash) expandDirectory() {
	oldSize := 1 << eh.gd
	eh.gd++
	newSize := 1 << eh.gd

	newDirs := make([]*Bucket, newSize)

	// –î—É–±–ª–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ä—ã–µ –±–∞–∫–µ—Ç—ã –≤ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ
	for i := 0; i < newSize; i++ {
		newDirs[i] = eh.directories[i%oldSize]
	}

	eh.directories = newDirs
}

func (eh *ExtendibleHash) splitBucket(index int) {
	bucket := eh.directories[index]

	// –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∫–µ—Ç–∞
	if len(bucket.table) < bucket.maxSize {
		return
	}

	// –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–≤–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π -> —Ä–∞—Å—à–∏—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É
	if bucket.ld == eh.gd {
		eh.expandDirectory()
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–∞–∫–µ—Ç–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–π –ª–æ–∫–∞–ª—å–Ω–æ–π –≥–ª—É–±–∏–Ω–æ–π
	newBucket := &Bucket{
		table:   make([]keyValue, 0, bucket.maxSize),
		ld:      bucket.ld + 1,
		maxSize: bucket.maxSize,
	}

	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≥–ª—É–±–∏–Ω—É —Å—Ç–∞—Ä–æ–≥–æ –±–∞–∫–µ—Ç–∞
	bucket.ld++

	oldKeys := bucket.table
	bucket.table = make([]keyValue, 0, bucket.maxSize)

	// –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π –º–µ–∂–¥—É —Å—Ç–∞—Ä—ã–º –∏ –Ω–æ–≤—ã–º –±–∞–∫–µ—Ç–æ–º
	for _, kv := range oldKeys {
		newIndex := finalHash(kv.key) & ((1 << bucket.ld) - 1)
		if newIndex == index {
			bucket.table = append(bucket.table, kv)
		} else {
			newBucket.table = append(newBucket.table, kv)
		}
	}

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –≤ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
	for i := range eh.directories {
		if (i & ((1 << (bucket.ld - 1)) - 1)) == index {
			if (i & (1 << (bucket.ld - 1))) == 0 {
				eh.directories[i] = bucket
			} else {
				eh.directories[i] = newBucket
			}
		}
	}
}

// Lookup –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ.
func (eh *ExtendibleHash) Lookup(key string) (bool, any) {
	h := finalHash(key) // XOR-—Ö–µ—à –¥–ª—è –ø–æ–∏—Å–∫–∞
	index := h & ((1 << eh.gd) - 1)
	bucket := eh.directories[index]

	for _, kv := range bucket.table {
		if kv.key == key {
			return true, kv.value
		}
	}

	return false, nil
}

// DeleteKey —É–¥–∞–ª—è–µ—Ç –∫–ª—é—á –∏–∑ —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—ã.
func (eh *ExtendibleHash) DeleteKey(key string) error {
	h := finalHash(key)
	index := h & ((1 << eh.gd) - 1)
	bucket := eh.directories[index]

	for i, kv := range bucket.table {
		if kv.key == key {
			bucket.table = append(bucket.table[:i], bucket.table[i+1:]...)
			return nil
		}
	}

	return fmt.Errorf("–∫–ª—é—á %s –Ω–µ –Ω–∞–π–¥–µ–Ω", key)
}
